openapi: 3.0.0
info:
  title: Rest Web Service
  description:
    A simple service that allows CRUD operations for a Customer Inventory system.
  version: 0.0.1
servers:
  - url: 'http://localhost:8080'
    description: Local dev server
paths:
  /customers:
    post:
      summary: Creates a new Customer entry with the given information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: A Customer object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request syntax.
        '422':
          description: Incomplete customer information. Some required fields missing.
          
    get:
      summary: Retrieves a list of customers
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
      
          
  /customer{customerId}:
    # GET, DELETE, and PUT are all under this path entry
    get:
      summary: Retrieves the entry for the customer with the give ID.
      parameters: 
        - name: customerId
          in: path
          required: true
          description: ID of the customer to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Customer object matching given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      
    delete:
      summary: Deletes the entry for the customer with the given ID.
      parameters: 
        - name: customerId
          in: path
          required: true
          description: ID of the customer you would like to delete.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Customer successfully deleted.
          
    put:
      summary: Updated the entry for the customer with the given ID.
      parameters: 
        - name: customerId
          in: path
          required: true
          description: ID of the customer you would like to update.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer successfully updated.
        '422':
          description: Customer ID on path mush match the ID in the Customer object.
          
  /item:
    post:
      summary: Creates a new Item entry with the given information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: An Item object successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid request syntax.
        '422':
          description: Incomplete item information. Some required fields missing.
          
    get:
      summary: Retrieves a list of customers
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
          
  /item{itemId}:
    # GET, DELETE, and PUT are all under this path entry
    get:
      summary: Retrieves the entry for the Item with the give ID.
      parameters: 
        - name: itemId
          in: path
          required: true
          description: ID of the item to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Item object matching given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
      
    delete:
      summary: Deletes the entry for the Item with the given ID.
      parameters: 
        - name: itemId
          in: path
          required: true
          description: ID of the item you would like to delete.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Item successfully deleted.
          
    put:
      summary: Updated the entry for the item with the given ID.
      parameters: 
        - name: itemId
          in: path
          required: true
          description: ID of the item you would like to update.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item successfully updated.
        '422':
          description: Item ID on path mush match the ID in the Item object.
          
  /invoice:
    post:
      summary: Creates a new Invoice entry with the given information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '201':
          description: An invoice object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          description: Invalid request syntax.
        '422':
          description: Incomplete invoice information. Some required fields missing.
          
  /invoiceItem:
    post:
      summary: Creates a new Invoice item entry with the given information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceItem'
      responses:
        '201':
          description: An invoice item object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceItem'
        '400':
          description: Invalid request syntax.
        '422':
          description: Incomplete invoice item information. Some required fields missing.
          
  /invoice{invoiceId}:

    delete:
      summary: Deletes the entry for the invoice with the given ID.
      parameters: 
        - name: invoiceId
          in: path
          required: true
          description: ID of the invoice you would like to delete.
          schema:
            type: integer
            format: int64
            minimum: 1
            
      responses:
        '200':
          description: Invoice successfully deleted
          
  /invoice{customerId}:
  
    get:
      summary: Retrieves the entry for the Invoice with the customerId.
      parameters: 
        - name: customerId
          in: path
          required: true
          description: ID of the invoices to retrieve by customer.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Invoice object matching given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          
components:
  schemas:
    Customer:
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        company:
          type: string
        phone:
          type: string
      required: 
        - firstName
        - lastName
        - email
        - company
        - phone
    
    Item:
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        daily_rate:
          type: string
      required: 
        - name
        - dailyRate
        
    Invoice:
      properties:
        id:
          type: integer
        customerId:
          type: integer
        orderDate:
          type: integer
        pickupDate:
          type: integer
        returnDate:
          type: integer
        lateFee:
          type: number
          
    InvoiceItem:
      properties:
        id:
          type: integer
        invoiceId:
          type: integer
        itemId:
          type: integer
        quality:
          type: integer
        unitRate:
          type: number
        discount:
          type: number
